# This is a basic workflow to help you get started with Actions

name: Release

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  BUILD_DIR: build

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This workflow contains multiple "build" jobs
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: |
          cmake -E make_directory $BUILD_DIR
          cmake -E make_directory llvm

      - name: Download LLVM (Linux Release)
        working-directory: ${{github.workspace}}/llvm
        if: matrix.os == 'ubuntu-latest'
        run: |
          wget -q https://github.com/fly-lang/llvm-project/releases/download/v11.1.0-linux-x86_64/llvm-11.1.0-x86_64-linux-gnu.tar.gz
          tar -zxvf *.tar.gz

      - name: Download LLVM (macOS Release)
        working-directory: ${{github.workspace}}/llvm
        if: matrix.os == 'macos-latest'
        run: |
          wget -q https://github.com/fly-lang/llvm-project/releases/download/v11.1.0-macos-x86_64/llvm-11.1.0-x86_64-apple-darwin.tar.gz
          tar -zxvf *.tar.gz

      - name: Download LLVM (Windows Release)
        working-directory: ${{github.workspace}}/llvm
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri https://github.com/fly-lang/llvm-project/releases/download/v11.1.0-win-x64/llvm-11.1.0-win-x64.zip -OutFile llvm.zip
          7z x llvm.zip

      - name: Build
        working-directory: ${{github.workspace}}/llvm
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: |
          cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DLLVM_INSTALL_PATH=$GITHUB_WORKSPACE/llvm/lib/cmake
          cmake --build .

      - name: Test
        working-directory: ${{github.workspace}}/${{env.BUILD_DIR}}
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C $BUILD_TYPE

      - name: Read Version
        working-directory: ${{github.workspace}}/${{env.BUILD_DIR}}
        id: version
        run: |
          ls -Al
          pwd
          echo "::set-output name=version::$(./src/fly --version-short)"

      - name: Linux Packaging
        if: matrix.os == 'ubuntu-latest'
        working-directory: ${{github.workspace}}/${{env.BUILD_DIR}}/src
        run: tar -czvf ../fly-${{ steps.version.outputs.version }}-linux-x86_64.tar.gz fly

      - name: Windows Packaging
        if: matrix.os == 'windows-latest'
        working-directory: ${{github.workspace}}/${{env.BUILD_DIR}}/src
        run: 7z a ../llvm-${{ steps.version.outputs.version }}-win-x64.zip fly

      - name: macOS Packaging
        if: matrix.os == 'macos-latest'
        working-directory: ${{github.workspace}}/${{env.BUILD_DIR}}/src
        run: tar -czvf ../fly-${{ steps.version.outputs.version }}-macos-x86_64.tar.gz fly

      - uses: actions/upload-artifact@v2
        if: matrix.os == 'ubuntu-latest'
        with:
          name: linux-artifact
          path: ${{github.workspace}}/${{env.BUILD_DIR}}/fly-${{ steps.version.outputs.version }}-linux-x86_64.tar.gz

      - uses: actions/upload-artifact@v2
        if: matrix.os == 'windows-latest'
        with:
          name: windows-artifact
          path: ${{github.workspace}}/${{env.BUILD_DIR}}/fly-${{ steps.version.outputs.version }}-win-x64.zip

      - uses: actions/upload-artifact@v2
        if: matrix.os == 'macos-latest'
        with:
          name: macos-artifact
          path: ${{github.workspace}}/${{env.BUILD_DIR}}/fly-${{ steps.version.outputs.version }}-macos-x86_64.tar.gz

  release:
    needs: [build]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: true
          release_name: Fly ${{env.FLY_VERSION}} Pre-release
          tag_name: v${{env.FLY_VERSION}}
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - uses: actions/download-artifact@v2
        if: matrix.os == 'ubuntu-latest'
        with:
          name: linux-artifact

      - uses: actions/download-artifact@v2
        if: matrix.os == 'windows-latest'
        with:
          name: windows-artifact

      - uses: actions/download-artifact@v2
        if: matrix.os == 'macos-latest'
        with:
          name: macos-artifact

      - name: Linux Upload
        uses: actions/upload-release-asset@v1
        if: matrix.os == 'ubuntu-latest'
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: fly-${{ steps.version.outputs.version }}-linux-x86_64.tar.gz
          asset_name: fly-${{ steps.version.outputs.version }}-linux-x86_64.tar.gz
          asset_content_type: application/gzip

      - name: Windows Upload
        uses: actions/upload-release-asset@v1
        if: matrix.os == 'windows-latest'
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: fly-${{ steps.version.outputs.version }}-win-x64.zip
          asset_name: fly-${{ steps.version.outputs.version }}-win-x64.zip
          asset_content_type: application/gzip

      - name: macOS Upload
        uses: actions/upload-release-asset@v1
        if: matrix.os == 'macos-latest'
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: fly-${{ steps.version.outputs.version }}-macos-x86_64.tar.gz
          asset_name: fly-${{ steps.version.outputs.version }}-macos-x86_64.tar.gz
          asset_content_type: application/gzip
