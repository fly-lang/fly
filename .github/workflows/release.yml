# This is a basic workflow to help you get started with Actions

name: Release

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  UNIX_BUILD_PATH: ${{github.workspace}}/build
  WIN_BUILD_PATH: ${{github.workspace}}\build

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  win_build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    defaults:
      run:
        shell: bash

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Create Build Environment
        # Use this as our working directory for all subsequent commands
        run: cmake -E make_directory $WIN_BUILD_PATH    

      - name: Download LLVM sources
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri 'https://github.com/llvm/llvm-project/releases/download/llvmorg-11.1.0/llvm-11.1.0.src.tar.xz' -Out llvm-11.1.0.src.tar.xz
          7z e llvm-11.1.0.src.tar.xz
          7z x llvm-11.1.0.src.tar
          MoveItem llvm-11.1.0.src $GITHUB_WORKSPACE\llvm

      - name: Configure CMake
        working-directory: ${{env.WIN_BUILD_PATH}}
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DUSE_INSTALLED_LLVM=false

      - name: Build
        working-directory: ${{env.WIN_BUILD_PATH}}
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE

      - name: Test
        working-directory: ${{env.WIN_BUILD_PATH}}
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C $BUILD_TYPE

      - name: Read Version
        id: version
        run: echo "::set-output name=version::$(./src/fly --version-short)"
        working-directory: ${{env.WIN_BUILD_PATH}}

      - name: Packaging
        working-directory: ${{env.WIN_BUILD_PATH}}
        run: zip fly-${{ steps.version.outputs.version }}-win-x64 ./src/fly

      - uses: actions/upload-artifact@v2
        with:
          name: windows-artifact
          path: ${{env.WIN_BUILD_PATH}}/fly-${{ steps.version.outputs.version }}-win-x64.zip
          
  release:
    needs: [win_build]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: true
          release_name: Fly ${{env.FLY_VERSION}} Pre-release
          tag_name: v${{env.FLY_VERSION}}
        env:
          GITHUB_TOKEN: ${{ github.token }}


      - uses: actions/download-artifact@v2
        with:
          name: windows-artifact

      - name: Windows Upload
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{env.WIN_BUILD_PATH}}/fly-${{ steps.version.outputs.version }}-win-x64.zip
          asset_name: fly-${{ steps.version.outputs.version }}-win-x64.zip
          asset_content_type: application/zip
